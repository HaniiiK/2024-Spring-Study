 단축키 뭐 안되면 -> opttion enter  (import기능) @override
단축키 command + N
     command + A 전체 선택
     command shift enter: ; 포함해서 자동완성
     option command v : 자동완성 (영한픽)
 단축키     psvm =   public static void main(String[] args) {
    Member findMember = memberService.findMember(1L);
        soutv  입력하고 enter -> 변수 자동 sysout 찍어줌
        command shift v : 문장의 위아래 순서 바꿔줌
        command shif t : 테스트 만들기
자동 import: ctrl option O
***option + enter static메서드 Asserts

option command N 변수 return 합치기
soutm sysout찍을 때 call~

command option B 구현체로 바로 갈 수 있다
command option  N 합치기. inline
option command B 구현체로 바로 들어감

iter: for문 자동 완성



      fn F2 dh오류난 곳으로 이동

      primitive 타입 long은 null 사용 불가 -> Long 쓰면 null 가능

      command shit T 테스트 클래스 만들어줌

      alt enter -> static Import! Method화 Assertions
          assertThat(discount).isEqualTo(0); 이렇게 짧아진다

command e + enter :history  이전으로 돌아간다

Private 메소드 또는 변수 추출	Command + Option + M + M

package hello.core.order;

import hello.core.discount.DiscountPolicy;
import hello.core.discount.FixDiscountPolicy;
import hello.core.discount.RateDiscountPolicy;
import hello.core.member.Member;
import hello.core.member.MemberRepository;
import hello.core.member.MemoryMemberRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;


public class OrderServiceImpl implements OrderService {
    //필드 주입
    //구현체인 OrderServiceImpl 내부를 직접 수정해야하므로 OCP 만족x
    //FixDiscountPolicy를 RateDiscountPolicy로 변경하는 순간 OrdertServiceImpl의 소스 코드도 함께 변경해야한다 :OCP위반
    //private final MemberRepository memberRepository = new MemoryMemberRepository();
    private final MemberRepository memberRepository; //인터페이스에만 의존한다!! ->DIP만족한다. 드디어
    private final DiscountPolicy discountPolicy;
    //final -> 생성자를 통해서 할당되어야한다.
    //private final DiscountPolicy discountPolicy = new FixDiscountPolicy();
    //추상(인터페이스) DiscountPolicy 에만 의존 해야하는데 구현체 (구체화)RateDiscountPolicy()에도 의존하고 있다.

    public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
        this.memberRepository = memberRepository;   //this가 위의 멤버변수이다. 멤버변수에 할당된다.
        this.discountPolicy = discountPolicy;
    }


//    private DiscountPolicy discountPolicy;
    //DIP 만족 but nullPointException -> 클라이언트인 OrderServiceImpl에 DiscountPolicy의 구현 객체를 대신 생성하고 주입해주어야 한다.

//private final DiscountPolicy discountPolicy = new RateDiscountPolicy();

//생성자 만듦. 생성자를 통해서 MemberRespository의 구현체에 뭐가 들어갈지를 정한다.


    @Override
    public Order createOrder(Long memberId, String itemName, int itemPrice) {
        Member member = memberRepository.findById(memberId);
        int discountPrice = discountPolicy.discount(member, itemPrice);
        return new Order(memberId, itemName, itemPrice, discountPrice);
    }
}



------------------------------------------------------------------------------------------------------------
package hello.core;

import hello.core.discount.FixDiscountPolicy;
import hello.core.member.MemberService;
import hello.core.member.MemberServiceImpl;
import hello.core.member.MemoryMemberRepository;
import hello.core.order.Order;
import hello.core.order.OrderService;
import hello.core.order.OrderServiceImpl;
//애플리케이션 환경 설정
//-> Configuratin, Bean 어노테이션 이용! 의존성주입 DI를 이용하면  MemberSerciceImpl에서 MemoryMemberRepository구현체를 사욜할 수 있다.( 생성자를 통해서 멤버변수에 값을 할당받음)

//AppConfig가 MemberServiceImpl과 MemoryMemberRepository 둘 다 생성한다.
//객체의 생성과 연결을 담당한다 -> DIP 완성! (이제는 MemberServiceImpl은 추상에만 의존하면 된다.)
//객체를 생성하고  연결하는 역할(by AppConfig), 실행하는 역할 (MemberServiceImpl) 이렇게 분리된다.
public class AppConfig {

    //생성자를 통해서 new인스턴스 생성된것을 (구현체)를 주입  = 생성자를 통해 주입
    //AppConfig는 애플리케이션의 실제 동작에 필요한 구현 객체를 생성한다.
    // MemberServiceImpl의 인스턴스를 생성(new)하여 반환하고= 구현객체!
    //memberService() 메서드
    //MemberService 인터페이스를 반환한다.

    public MemberService memberService(){
        //MemberServiceImpl 사용 하는 곳에서는 new MemoryMemberRepository() = 구현체 이걸 사용하고 있다!
        //new MemberServiceImpl(): 구현체 생성하면서 new MemoryMemberRepository(): 구현체 생성한다!
        //new MemoryMemberRepository()는 새로운 MemoryMemberRepository 객체를 생성하는 코드
        //참조값은 객체의 메모리 주소를 나타내는 값입니다. 객체를 생성하면 해당 객체는 메모리의 특정 위치에 할당되고, 이 위치를 가리키는 값이 참조값.
        //toString() 오버라이드 안했으면 sysout했을 때 참조값이 나온다.
        //참조값을 같이 넘긴다!
        return new MemberServiceImpl(new MemoryMemberRepository());
    }

    public OrderService orderService(){
        return new OrderServiceImpl(new MemoryMemberRepository(),new FixDiscountPolicy());
    }

}


------------------------------------------------------------------------------
package hello.core.member;

public class MemberServiceImpl implements MemberService {
    //필드주입
//구현 객체를 설정안해주면 nullpointException
    //memberRepository 필드에 할당하고 있다.
//new MemoryMemberRepository() 표현식은 MemoryMemberRepository 클래스의 생성자를 호출하여 객체를 생성.
// 그리고 이 객체는 = 연산자를 사용하여 memberRepository 필드(이면서 객체(인스턴스))에 할당됨
    // MemoryMemberRepository(구체화! )이건 MemberRepository(추상화! 인터페이스)의 구현체이다.
    //인터페이스에만 의존한다!
    //인터페이스 타입의 멤버 변수.
    private final MemberRepository memberRepository;
// 생성자를 통해서 이 멤버 레파지토리에 구현체가 뭐가 들어가는지 정의됨

    //MemberServiceImpl입장에서는 의존관계를 외부에서 주입다해주는 것과 같다.
    //AppConfig에 의해 new MemoryMemberRepository() 값이 memberRepository 여기에 할당된다.(DI 의존성 주입 Dependency Injection)
    //생성자를 통해 주입한다.
    public MemberServiceImpl(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    @Override
    public void join(Member member) {
        //memberRepository 인스턴스를 사용해서 MemoryMemberRepository()안에 있는 save메서드(오버라이드 했는 것)를 사용하겠다.
        memberRepository.save(member);

    }

    @Override
    public Member findMember(Long memberId) {
        return memberRepository.findById(memberId);
    }
}


